shapiro.test(resid(fit))
fit1 <- lm(log(birth_rate) ~ log(kindergarten), data=mydata)
summary(fit1)
plot(fit1)
shapiro.test(resid(fit1))
shapiro.test(resid(fit)) # 정규분포 X
# 시군구
fit2 <- lm(birth_rate ~ dummy, data=mydata)
summary(fit2)
plot(fit2)
getwd()
setwd("C:/dohyun0207/Rwork/StatProject")
getwd()
house <- read.csv("../data/kc_house_data.csv",header=T)
str(house)
## 거실의 크기가 크면 매매 가격이 비쌀것이다.
reg1 <- lm(price ~ sqft_living, data=house)
summary(reg1)
x <- cbind(sqft_living, bathroom, sqft_lot, floors)
attach(house)
x <- cbind(sqft_living, bathroom, sqft_lot, floors)
cor(x)
x <- cbind(sqft_living, bathroom, sqft_lot, floors)
cor(x)
x <- cbind(sqft_living, bathrooms, sqft_lot, floors)
cor(x)
cor(x, price)
reg2 <- lm(price ~ sqft_living + floors, data=house)
summary(reg2)
# 교차
reg2_1 <- lm(price ~ sqft_living + floors + sqft_living*floors, data=house)
summary(reg2_1)
# 다중 공산성 확인
install.packages("car")
library(car)
vif(reg2_1)
# 다른 변수 가지고 시도
x = cbind(floors, sqft_above, sqft_basement)
cor(x)
x = cbind(floors, bedrooms)
cor(x)
reg3 <- lm(price ~ floors + bedrooms, data = house)
summary(reg3)
vif(reg3)
unique(waterfront)
# 3개의관계 묶기. (수영장)
x = cbind(floors, bedrooms, waterfront)
cor(x)
cor(x, price)
reg4 <- lm(price ~ floors + bedrooms + waterfront, data = house)
summary(reg4)
vif(reg4)
reg5 <- lm(price ~ floors + bedrooms + waterfront + bedrooms*waterfront, data = house)
summary(reg5)
vif(reg5)
reg6 <- lm(price ~ floors + bedrooms + waterfront + floors*waterfront, data = house)
summary(reg6)
vif(reg6)
#### 실습2 ####
library(car)
View(state.x77)
# illiteracy : 문맹률
states <- as.data.frame(state.x77[, c("Murder", "Population","Illiteracy","Income","Frost")])
states
View(states)
lm(Murder ~ . ,data=states)
fit <- lm(Murder ~ . ,data=states)
summary(fit)
vif(fit)
sqrt(vif(fit))
getwd()
influencePlot(fit, id=list(method="identify"))
sqrt(vif(fit))
X11()
# 이상관측치를 확인할 수 있는 그래프
influencePlot(fit, id=list(method="identify"))
X11()
# 이상관측치를 확인할 수 있는 그래프
influencePlot(fit, id=list(method="identify"))
### 회귀모형의 교정
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(2,2))
plot(fit)
## 정규성을 만족하지 않을때
shapiro.test(resid(fit))
powerTransform(states$Murder)
summary(powerTransform(states$Murder))
## 선형성을 만족하지 않을 때
boxTidwell(Murder ~ Population, data=states)
## 선형성을 만족하지 않을 때
boxTidwell(Murder ~ Population + Illiteracy, data=states)
states$Population <- states$Population ^ 0.85
states$Illiteracy <- states$Illiteracy ^ 1.35
fit2 <- lm(Murder ~ Population + Illiteracy, data=states)
summary(fit2)
## 등분산성을 만족하지 않을경우
ncvTest(fit)
# 아니라고 가정하면 ~
spread.level.plot(fit)
# 아니라고 가정하면 ~
spreadlevelplot(fit)
# 아니라고 가정하면 ~
spreadLevelPlot(fit)
## AIC 확인
fit1 <- lm(Murder ~ . , data=states)
summary(fit1)
fit2 <- lm(Murder ~ Population + Illiteracy, data=states)
summary(fit2)
AIC(fit1, fit2)
## Backward
full.model <- lm(Murder ~ . , data=states)
reduce.model <- step(full.model, direction = "backward")
reduce.model
## Forward
min.model <- lm(Murder ~ 1, data=states)
fwd.model <- step(min.model, direction = "forward",
scope = (Murder ~ Population + Illiteracy + Income + Frost))
# All Subset Regression
install.packages("leaps")
library(leaps)
leap <- regsubsets(Murder ~ Population + Illiteracy + Income + Frost,
data=states, nbest = 4)
leap
par(mfrow=c(1,1))
plot(leap, scale = "adjr2")
mydata <- read.csv("../data/resgression.csv")
getwd()
mydata <- read.csv("../data/reigression.csv")
mydata <- read.csv("../data/regression.csv")
View(mydata)
fit1 <- lm(birth_rate ~ . , data=mydata) # 전체, 4개의 변수.
summary(fit1)
table(mydata$dummy)
table(mydata$.)
table(mydata)
table(mydata$birth_rate)
fit1 <- lm(birth_rate ~ . , data=mydata) # 전체, 4개의 변수.
summary(fit1)
leap <- regsubsets(birth_rate ~ . , data=mydata)
leap
leap <- regsubsets(birth_rate ~ . , data=mydata)
summary(fit1)
fit1 <- lm(birth_rate ~ . , data=mydata) # 전체, 4개의 변수.
summary(fit1)
is.na(mydata)
#### 실습3 ####
# 정규성, 등분산성, 다중공산성 검증
# 독립변수들이 출산율과 관계가 있는가
# 가장 영향력이 있는 변수는?
mydata <- read.csv("../data/regression.csv")
View(mydata)
fit1 <- lm(birth_rate ~ . , data=mydata) # 전체, 4개의 변수.
summary(fit1)
cor(mydata)
fwd.model <- step(min.model, direction = "forward",
scope = (Murder ~ cultural_center + social_welfare +
active_firms + pop + urban_park + doctors +
tris + kindergarten))
min.model <- lm(birth_rate ~ 1, data=mydata)
fwd.model <- step(min.model, direction = "forward",
scope = (Murder ~ cultural_center + social_welfare +
active_firms + pop + urban_park + doctors +
tris + kindergarten))
fwd.model <- step(min.model, direction = "forward",
scope = (birth_rate ~ cultural_center + social_welfare +
active_firms + pop + urban_park + doctors +
tris + kindergarten))
leap <- regsubsets(birth_rate ~ cultural_center + social_welfare +
active_firms + pop + urban_park + doctors +
tris + kindergarten,
data=mydata)
leap
leap <- regsubsets(Murder ~ Population + Illiteracy + Income + Frost,
data=states, nbest = 4)
# illiteracy : 문맹률
states <- as.data.frame(state.x77[, c("Murder", "Population","Illiteracy","Income","Frost")]) # 종속변수4개 + 1 = 5개
leap <- regsubsets(Murder ~ Population + Illiteracy + Income + Frost,
data=states, nbest = 4)
leap
par(mfrow=c(1,1))
plot(leap, scale = "adjr2")
#NOT MY CODE
mydata <- mydata[,-1]
str(mydata)
reg1 <- lm(birth_rate ~ ., data=mydata)
summary(reg1)
par(mfrow=c(2,2))
plot(reg1)
## backward OR forward
full.model <- lm(birth_rate ~ ., data = mydata)
back.model <- step(full.model, direction = "backward")
back.model
min.model <- lm(birth_rate ~ 1, data=mydata)
fwd.model <- step(min.model, direction = "forward",
scope = (birth_rate ~ cultural_center + social_welfare +
active_firms + pop + urban_park + doctors +
tris + kindergarten))
reg2 <- lm(birth_rate ~ social_welfare +
active_firms + pop + tris + kindergarten, data=mydata)
summary(reg2)
par(mfrow=c(2,2))
plot(reg2)
# 정규성
shapiro.test(resid(reg2))
powerTransform(mydata$birth_rate)
summary(powerTransform(mydata$birth_rate))
# reg2 보정 작업해서 3로 저장.
reg3 <- lm(birth_rate^-1 ~ social_welfare +
active_firms + pop + tris + kindergarten, data=mydata)
summary(reg3)
par(mfrow=c(2,2))
plot(reg3)
## 다중 공산성
sqrt(vif(reg1))
sqrt(vif(reg2))
sqrt(vif(reg3))
# 등분산성
ncvTest(reg1)
ncvTest(reg2)
ncvTest(reg3)
# 교정 보정.
spreadLevelPlot(reg3)
reg4 <- lm((birth_rate^-1)^-3.3 ~ social_welfare +
active_firms + pop + tris + kindergarten, data=mydata)
summary(reg4)
reg4 <- lm((birth_rate^-1)^3.3 ~ social_welfare +
active_firms + pop + tris + kindergarten, data=mydata)
summary(reg4)
# 등분산 재확인.
ncvTest(reg4)
# 번외
reg5 <- lm(log(birth_rate) ~ social_welfare +
active_firms + pop + tris + kindergarten, data=mydata)
summary(reg5)
mydata <- read.csv("../data/Seoulbike.csv")
mydata <- read.csv("../data/SeoulBikeData.csv")
View(mydata)
str(mydata)
summary(mydata)
## 1. 시간대별로 평균 몇대가 대여 되었을까?
library(dplyr)
mydata %>% group_by(Hour) %>% summarise(Reanted_Bike_mean = mean(Reanted.Bike.Count))
mydata %>% group_by(Hour) %>% summarise(Reanted_Bike_mean = mean("Reanted.Bike.Count"))
mydata %>% group_by(Hour) %>% summarise(count = mean(Reanted.Bike.Count))
result1 <- mydata %>% group_by(Hour) %>% summarise(count = mean(Reanted.Bike.Count))
result1
result1 <- mydata %>% group_by(Hour) %>% summarise(count = mean(Rented.Bike.Count))
result1
View(result1)
## 2. 위의 결과를 시각화
library(ggplot2)
ggplot(result1, aes(Hour, count)) + geom_line()
# p-value < 2.2e-16 < 0.5    나이에 대하여 차이가 있다.
?t.test
ggplot(result1, aes(Hour, count)) + geom_line(color="blue", size=2) +
geom_vline(xintercept = 8, size=2, color="red") +
geom_vline(xintercept = 18, size=2, color="red")
## 2. 위의 결과를 시각화
library(ggplot2)
ggplot(result1, aes(Hour, count)) + geom_line(color="blue", size=2) +
geom_vline(xintercept = 8, size=2, color="red") +
geom_vline(xintercept = 18, size=2, color="red")
ggplot(result1, aes(Hour, count)) + geom_line(color="blue", size=2) +
geom_vline(xintercept = 8, size=2, color="red") +
geom_vline(xintercept = 18, size=2, color="red") +
annotate(geom = "text", x=6, y=1100, label="출근") +
annotate(geom = "text", x=6, y=1500, label="퇴근")
ggplot(result1, aes(Hour, count)) + geom_line(color="blue", size=2) +
geom_vline(xintercept = 8, size=2, color="red") +
geom_vline(xintercept = 18, size=2, color="red") +
annotate(geom = "text", x=6, y=1100, label="출근") +
annotate(geom = "text", x=16, y=1500, label="퇴근")
## 3. 선형 회귀
attach(mydata)
reg1 <- lm(Rented.Bike.Count ~ ., data=mydata)
summary(reg1)
titanic <- read.csv("../data/train.csv", header=T)
View(titanic)
Titanic
View(Titanic)
titanic$Pclass1 <- ifelse(titanic$Pclass ==1, 1, 0)
titanic$Pclass2 <- ifelse(titanic$Pclass ==2, 1, 0)
titanic$Pclass3 <- ifelse(titanic$Pclass ==3, 1, 0)
reg1 <- lm(Survived ~ Pclass1 + Pclass2 + Pclass3, data=titanic)
summary(reg1)
glm(Survived ~ Pclass2 + Pclass3, data=titanic, family = binomial)
reg2 <- glm(Survived ~ Pclass2 + Pclass3, data=titanic, family = binomial)
summary(reg2)
reg1 <- lm(Survived ~ Pclass2 + Pclass3, data=titanic)
summary(reg1)
reg2 <- glm(Survived ~ Pclass2 + Pclass3, data=titanic, family = binomial)
summary(reg2)
exp(0.5306)-1
exp(-0.6394)-1
exp(-1.6704)-1
(exp(0.5306)-1)*100
(exp(-0.6394)-1)*100
(exp(-1.6704)-1)*100
?exp
# Age, Fare, Garder, Sibsp
titanic$GenderFemale <- ifelse(titanic$Sex == "female", 1, 0)
# Age, Fare, Garder, Sibsp
titanic$GenderFemale <- ifelse(titanic$Sex == "female", 1, 0)
titanic$GenderMale <- ifelse(titanic$Sex == "male", 1, 0)
unique(titanic$SibSp)
titanic$SibSp0 <- ifelse(titanic$SibSp == 0, 1, 0)
titanic$SibSp1 <- ifelse(titanic$SibSp == 1, 1, 0)
titanic$SibSp2 <- ifelse(titanic$SibSp == 2, 1, 0)
titanic$SibSp3 <- ifelse(titanic$SibSp == 3, 1, 0)
titanic$SibSp4 <- ifelse(titanic$SibSp == 4, 1, 0)
titanic$SibSp5 <- ifelse(titanic$SibSp == 5, 1, 0)
titanic$SibSp8 <- ifelse(titanic$SibSp == 8, 1, 0)
reg3 <- glm(Survived ~ Age + Fare + GenderMale +
Sibsp1 + Sibsp2 + Sibsp3 + Sibsp4 + Sibsp5 + Sibsp8,
data = titanic, family = binomial)
summary(reg3)
reg3 <- glm(Survived ~ Age + Fare + GenderMale +
Sibsp1 + Sibsp2 + Sibsp3 + Sibsp4 + Sibsp5 + Sibsp8,
data = titanic, family = binomial)
summary(reg3)
reg3 <- glm(Survived ~ Age + Fare + GenderMale +
Sibsp1 + Sibsp2 + Sibsp3 + Sibsp4 + Sibsp5 + Sibsp8,
data = titanic, family = binomial)
reg3 <- glm(Survived ~ Age + Fare + GenderMale +
SibSp1 + Sibsp2 + Sibsp3 + Sibsp4 + Sibsp5 + Sibsp8,
data = titanic, family = binomial)
reg3 <- glm(Survived ~ Age + Fare + GenderMale +
SibSp1 + SibSp2 + SibSp3 + SibSp4 + SibSp5 + SibSp8,
data = titanic, family = binomial)
summary(reg3)
reg3 <- glm(Survived ~ Age + Fare + GenderMale +
SibSp1 + SibSp2 + SibSp3 + SibSp4 + SibSp5,
data = titanic, family = binomial)
summary(reg3)
(exp(-0.0224)-1)*100
exp(-0.0224)
exp(0.0149)
# SibSp3
exp(-2.461568)
# SibSp3
(exp(-2.461568)-1)*100 # 생략한거 동반자0. 0일떄보다
exp(-2.461568)
exp(-2.411534)
(exp(-2.411534)-1)*100
test <- read.csv("C:/GitTest/10M_Movie/movie_DB/individual_trend/1987.csv")
View(test)
test <- test[,-1]
setwd("C:/GitTest/10M_Movie/movie_DB/individual_trend")
m_list = list.files(pattern="*.csv")
print(m_list)
print(len(m_list))
print(length(m_list))
m_list[1]
a <- read.csv("C:/GitTest/10M_Movie/movie_DB/individual_trend/1987.csv")
a <- a[,-1]
View(a)
a$스크린점유율, a$관객수
a$스크린점유율
a$관객수
shapiro.test(a$스크린점유율)
wilcox.test(스크린점유율 ~ 관객수, data=a)
cor(a$스크린점유율, a$관객수)
cnt <- 0
for(m in m_list){
cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", m)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
cor_list <- append(cor_list, cor(m$스크린점유율, m$관객수), after=cnt)
cnt <- cnt + 1
}
m_cor <- data.frame("영화"=m_list, "상관계수"=cor_list)
View(m_cor)
View(cor_list)
for(m in m_list){
cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", m)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
print(cor(m$스크린점유율, m$관객수))
cor_list <- append(cor_list, cor(m$스크린점유율, m$관객수), after=cnt)
cnt <- cnt + 1
}
for(m in m_list){
cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", m)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
cat(m, cor(m$스크린점유율, m$관객수))
}
#print(cor(m$스크린점유율, m$관객수))
print(m)
m_list[1]
#print(cor(m$스크린점유율, m$관객수))
print(i)
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
for(i in m_list){
#cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
print(i)
print(cor(m$스크린점유율, m$관객수))
}
for(i in m_list){
#cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
print(i)
cat(i, cor(m$스크린점유율, m$관객수))
}
for(i in m_list){
#cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
#print(i)
cat(i, cor(m$스크린점유율, m$관객수))
}
#print(cor(m$스크린점유율, m$관객수))
print(i)
for(i in m_list){
#cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
print(i)
cat(i, cor(m$스크린점유율, m$관객수))
}
#print(cor(m$스크린점유율, m$관객수))
print(i, cor(m$스크린점유율, m$관객수))
for(i in m_list){
#cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
print(i, cor(m$스크린점유율, m$관객수))
cat(i, cor(m$스크린점유율, m$관객수))
}
for(i in m_list){
#cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
print(i)
cat(i, cor(m$스크린점유율, m$관객수), "\n")
}
for(i in m_list){
#cor_list = NULL
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
#print(cor(m$스크린점유율, m$관객수))
#print(i)
cat(i, cor(m$스크린점유율, m$관객수), "\n")
}
cor_list = NULL
cor_list = NULL
for(i in m_list){
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
cor_list <- c(cor_list, cor(m$스크린점유율, m$관객수))
#cat(i, cor(m$스크린점유율, m$관객수), "\n")
}
cor_list
m_cor
m_cor <- data.frame("영화"=m_list, "상관계수"=cor_list)
View(m_cor)
screen_cor = NULL
for(i in m_list){
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
screen_cor <- c(screen_cor, cor(m$스크린점유율, m$관객수))
#cat(i, cor(m$스크린점유율, m$관객수), "\n")
}
screen_cor
play_cor = NULL
screen_cor = NULL
play_cor = NULL
for(i in m_list){
dir <- sprintf("C:/GitTest/10M_Movie/movie_DB/individual_trend/%s", i)
m <- read.csv(dir)
m <- m[,-1]
screen_cor <- c(screen_cor, cor(m$스크린점유율, m$관객수))
#cat(i, cor(m$스크린점유율, m$관객수), "\n")
play_cor <- c(play_cor, cor(m$상영점유율, m$관객수))
}
m_cor <- data.frame("영화"=m_list, "스크린점유율의 상관계수"=screen_cor,
"상영점유율의 상관계수"=play_cor)
m_cor
write.csv(m_cor, "C:/GitTest/10M_Movie/analysis/test.csv", row.names = F, quote = F)
m_cor["스크린점유율의.상관계수"]
## 두 상관계수 끼리의 관계
for(i in length(m_cor)){
m_cor["관계"] <- cor(m_cor[i,2], m_cor[i,3])
}
m_cor
cor(m_cor[1,2], m_cor[1,3])
m_cor[1,2]
